{"version":3,"sources":["Header.js","Footer.js","Intro.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Navbar","class","style","marginBottom","backgroundColor","color","Brand","href","Nav","NavItem","eventKey","pullRight","NavDropdown","title","id","MenuItem","divider","Component","Footer","DescriptionComponent","Grid","Row","className","Col","xs","md","Intro","Fragment","src_Header_0","src","alt","src_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_Intro","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QA6CeA,0LAtCX,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAM,eACNC,MAAO,CACLC,aAAc,IACdC,gBAAiB,mBACjBC,MAAO,UAGTR,EAAAC,EAAAC,cAACC,EAAA,EAAOJ,OAAR,KACEC,EAAAC,EAAAC,cAACC,EAAA,EAAOM,MAAR,KACET,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,QAAQL,MAAO,CAAEG,MAAO,UAAhC,eAKJR,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAASC,SAAU,EAAGH,KAAK,KACzBV,EAAAC,EAAAC,cAAA,KAAGG,MAAO,CAAEG,MAAO,UAAnB,YAEFR,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAASC,SAAU,EAAGH,KAAK,KACzBV,EAAAC,EAAAC,cAAA,KAAGG,MAAO,CAAEG,MAAO,UAAnB,qBAGJR,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAKG,WAAS,GACZd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAaF,SAAU,EAAGG,MAAM,aAAaC,GAAG,sBAC9CjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUL,SAAU,KAApB,UACAb,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUL,SAAU,KAApB,kBACAb,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUL,SAAU,KAApB,uBACAb,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUC,SAAO,IACjBnB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAUL,SAAU,KAApB,4BAhCSO,yDCMNC,MARf,WACE,OACErB,EAAAC,EAAAC,cAAA,OAAKE,MAAM,UACTJ,EAAAC,EAAAC,cAAA,oECAN,SAASoB,IACP,OACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAKC,UAAU,aACbzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,IAChB5B,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACd5B,EAAAC,EAAAC,cAAA,MAAIE,MAAM,4BAAV,aACAJ,EAAAC,EAAAC,cAAA,MAAIE,MAAM,kBAAV,4BACAJ,EAAAC,EAAAC,cAAA,SACG,IADH,2cAiCK2B,mLAfX,OACE7B,EAAAC,EAAAC,cAACF,EAAAC,EAAM6B,SAAP,KACE9B,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAA,OACEE,MAAM,SACN4B,IAAI,sEACJC,IAAI,WAENjC,EAAAC,EAAAC,cAACoB,EAAD,MACAtB,EAAAC,EAAAC,cAACgC,EAAD,cAXYd,aClBAe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAAWC,SAASC,eAAe,SD2H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.499c3ab4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport { Nav, Navbar, NavItem, MenuItem, NavDropdown } from \"react-bootstrap\";\nimport \"./Header.css\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <Navbar\n        class=\"customNavbar\"\n        style={{\n          marginBottom: \"0\",\n          backgroundColor: \"rgb(155, 40, 59)\",\n          color: \"white\"\n        }}\n      >\n        <Navbar.Header>\n          <Navbar.Brand>\n            <a href=\"#home\" style={{ color: \"white\" }}>\n              TAPADKOT?\n            </a>\n          </Navbar.Brand>\n        </Navbar.Header>\n        <Nav>\n          <NavItem eventKey={1} href=\"#\">\n            <a style={{ color: \"white\" }}>Housing</a>\n          </NavItem>\n          <NavItem eventKey={2} href=\"#\">\n            <a style={{ color: \"white\" }}>Invite a member</a>\n          </NavItem>\n        </Nav>\n        <Nav pullRight>\n          <NavDropdown eventKey={3} title=\"my account\" id=\"basic-nav-dropdown\">\n            <MenuItem eventKey={3.1}>Action</MenuItem>\n            <MenuItem eventKey={3.2}>Another action</MenuItem>\n            <MenuItem eventKey={3.3}>Something else here</MenuItem>\n            <MenuItem divider />\n            <MenuItem eventKey={3.4}>Separated link</MenuItem>\n          </NavDropdown>\n        </Nav>\n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./Footer.css\";\n\nfunction Footer() {\n  return (\n    <div class=\"footer\">\n      <p>Pourquoi ne pas récupérer le footer de l'Umons?</p>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\nimport \"./intro.css\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport Footer from \"./Footer\";\n\nfunction DescriptionComponent() {\n  return (\n    <Grid>\n      <Row className=\"show-grid\">\n        <Col xs={2} md={2} />\n        <Col xs={8} md={8}>\n          <h1 class=\"fs350 centered marginTop\">TAPADKOT?</h1>\n          <h2 class=\"fs200 centered\"> L'umons a une solution!</h2>\n          <p>\n            {\" \"}\n            Lorem ipsum dolor sit amet, in ius labitur percipit praesent, in\n            offendit necessitatibus cum. Utinam voluptatum posidonium eam cu.\n            Pro cu nusquam atomorum, denique definitionem et sed. At ius case\n            recteque intellegam, sea illum tamquam an, impedit nominati duo cu.\n            Mundi solet inermis ad eam, vivendo delectus cu mea. Erant iudicabit\n            disputando eu mel, pro ignota prompta insolens te. Ea fierent\n            perfecto per, euismod oporteat mediocritatem his te.\n          </p>\n        </Col>\n      </Row>\n    </Grid>\n  );\n}\n\nclass Intro extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <img\n          class=\"banner\"\n          src=\"http://www.robertviseur.be/news-pic/mons-20100307-panorama-h400.jpg\"\n          alt=\"banner\"\n        />\n        <DescriptionComponent />\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Intro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Intro from \"./Intro\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Intro />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}